// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model UserPreference {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  categories Category[]
  interactions Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Category {
  GENERAL
  TECHNOLOGY
  LIFESTYLE
  BUSINESS
  ENTERTAINMENT
  SPORTS
  CARS
  GADGETS
  MUSIC
}

model User {
  id            String    @id @default(cuid())
  username      String?    @unique
  name          String?
  email         String?   @unique @map(name: "email")
  emailVerified DateTime? @map("email_verified")
  image        String? @map(name: "image")
  bio           String?
  url           String?
  location      String?
  private       Boolean   @default(false)
  verified      Boolean   @default(false)
  profileViews  Boolean       @default(false)
  role          Role      @default(USER)
  accounts      Account[]
  sessions      Session[]
  threads       Thread[]
  followers     Follow[]  @relation("UserFollowers")
  following     Follow[]  @relation("UserFollowing")
  likes         Like[]
  comments      Comment[]
  commentLikes  CommentLike[]
  preferences   UserPreference[]
  notifications Notification[] @relation("UserNotifications")
  notificationsMade Notification[] @relation("AuthorNotifications")
  @@map("users")
}

model Thread {
  id        String   @id @default(cuid())
  content   String
  images     String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  likes     Like[]
  comments  Comment[]
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  viewed    Boolean  @default(false)
  user      User     @relation("UserNotifications", fields: [userId], references: [id], onDelete: Cascade)
  authorId  String
  author    User     @relation("AuthorNotifications", fields: [authorId], references: [id], onDelete: Cascade)
  content   String
  threadId  String?
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id        String   @id @default(cuid())
  threadId  String
  thread    Thread   @relation(fields: [threadId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime @default(now())

  @@unique([threadId, userId])
}

model CommentLike {
  id        String   @id @default(cuid())
  commentId String
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime @default(now())

  @@unique([commentId, userId])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  thread    Thread   @relation(fields: [threadId], references: [id], onDelete: Cascade)
  threadId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  likes     CommentLike[]
}

model Follow {
  id           String @id @default(cuid())
  followerId   String
  followingId  String
  follower     User   @relation("UserFollowers", fields: [followerId], references: [id])
  following    User   @relation("UserFollowing", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
  @@map("follows")
}

enum Role {
  USER
  ADMIN
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
